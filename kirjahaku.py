#  --------------------------------------------------------------------------------------------------------------------------------------
# |                                                          Kirjanhaku-ohjelma                                                          |
# |                        T√§m√§ on Pythonilla tehty komentorivipohjainen sovellus, jolla voit hakea kirjoja                              |
# |                              OpenLibraryn (https://openlibrary.org/) avoimen rajapinnan kautta.                                      |                                         
# |                                                                                                                                      |
# |                                        K√§ytt√§j√§ voi mm. hakea kirjoja kolmella eri tavalla:                                          |                                                                               
# |                                                     1. Kirjan nimell√§ (title)                                                        |
# |                                                     2. Kirjailijan nimell√§ (author)                                                  |
# |                            3. Yhdistetyll√§ haulla (kirjan nimi + kirjailija), joka k√§ytt√§√§ laajempaa tietokantaa (q)                 |
# |                                                                                                                                      |
# |    Ohjelma n√§ytt√§√§ k√§ytt√§j√§lle viisi hakutulosta, jotka sis√§lt√§v√§t kirjan nimen, kirjailijan, ja julkaisuvuoden jos semmoinen l√∂ytyy |    
# |                                                                                                                                      |
# |                                          Toimii vain ja ainoastaan t√§ll√§ hetkell√§ Terminaalissa                                      |
# |                                              Ota huomioon, ett√§ sinulla on vakaa verkkoyhteys                                        |
# |                                                                                                                                      |
# |                                                         Ohjelmoinut Joni Haveri                                                      |
# |                                                         jonihaveri08@gmail.com                                                       |
# |                                                                                                                                      |
#  --------------------------------------------------------------------------------------------------------------------------------------

# Tuodaan requests -kirjasto, jotta API-kutsuja voidaan k√§ytt√§√§
import requests

# Viiveiden lis√§√§mist√§ varten
import time

# K√§ytett√§v√§n API:n URL-osoite
base_url = "https://openlibrary.org/search.json?"

# Funktio, jossa kirjaimet tulevat hieman viiveell√§ kirjain kirjaimelta, n√§ytt√§√§kseen hienolta terminaalissa (Vain visuaalisuuden takia)
def type_writer(text, delay=0.05):
 
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

# Funktio verkkoyhteyden tarkastamiseen
def check_internet():
    try:
        # Pyynt√∂ OpenLibraryyn
        requests.get("https://openlibrary.org", timeout=10)
        return True
    except requests.exceptions.RequestException:
        return False

# Jos verkkoyhteytt√§ ei ole, tulostetaan ilmoitus
if not check_internet():
    print("Ei internet yhteytt√§! Tarkista verkkoyhteys ja k√§ynnist√§ sitten ohjelma uudelleen")
    time.sleep(3)
    exit()

# Funktio, joka hakee OpenLibrary API:sta kirjan nimell√§
def search_by_title(title):
    url_1 = f"{base_url}title={title}"
    response = requests.get(url_1)
    show_results(response)

# Funktio, joka hakee OpenLibrary API:sta kirjailijan nimell√§
def search_by_author(author):
    url_2 = f"{base_url}author={author}"
    response = requests.get(url_2)
    show_results(response)

# Funktio, joka hakee OpenLibrary API:sta kirjan-, ett√§ kirjailijan nimell√§ (yhdistetty haku)
# Tarkempi vaihtoehto etsiess√§√§n tietty√§ haluamaansa kirjaa (laajempi tietokanta edellisiin n√§hden)
def search_by_title_and_author(title_and_author):
    url_3 = f"{base_url}q={title_and_author}"
    response = requests.get(url_3)
    show_results(response)

# Funktio, joka n√§ytt√§√§ hakutulokset k√§ytt√§j√§lle
def show_results(response, max_results = 5):

    # Virheilmoitus, jos API-pyynt√∂ ep√§onnistuu 
    # Esimerkiksi yhden kirjaimen haut tuottavat valtavan m√§√§r√§n tuloksia Openlibraryn palvelimillaan, joka saa API-pyynn√∂n menem√§√§n ihan sekaisin.
    # Vaihtoehtoja on jopa tuhansia, eik√§ palvelin juuri t√§m√§n takia osaa/pysty l√§hett√§m√§√§n dataa takaisin)
    # T√§m√§n takia asia on otettu huomioon virheilmoituksena
    if response.status_code != 200:
        print(f"Failed to retrieve data: {response.status_code}")
        return
    
    # Haetaan vastaus JSON-muodossa
    data = response.json()

    # Haetaan listasta "docs"-avaimen arvot (eli kirjat)
    docs = data.get("docs", [])

    # Jos kirjaa ei l√∂ydy
    if not docs:
        print("Valitettavasti Hakusi ei tuottanut yht√§√§n tulosta!")
        return
    
    # K√§yd√§√§n tulokset l√§pi for-silmukalla ja tulostetaan tiedot
    # max_results = 5, eli loppujen lopuksi tulostetaan viisi kirjaa, jotka ovat l√§hemp√§n√§ k√§ytt√§j√§n antamaa hakusanaa/sanoja
    for i, book in enumerate(docs[:max_results], start=1):

        # Kirjan nimi
        # Unknown = oletusarvo = None, jos kirjan nime√§ ei ole tiedossa
        title = book.get("title", "Unknown") 

        # Kirjailijan nimi
        # Unknown = oletusarvo = None, jos kirjailijan nime√§ ei ole tiedossa
        authors = ", ".join(book.get("author_name", ["Unknown"]))

        # Julkaisuvuosi, joka tulostetaan kirjan per√§√§n
        # Jos julkaisuvuotta ei l√∂ydy tietokannasta, merkit√§√§n sit√§ '???'
        year = book.get("first_publish_year", "???")
        print(f"{i}.{title} - {authors} ({year})")


print("\n")

# Tervetuloa-viesti      
type_writer("Tervetuloa terminaalissa toimivaan Kirjanhaku -ohjelmaaniüìö")
type_writer("Voit hakea kirjan muun muassa nimen, kirjailijan tai yhdistetyn haun perusteella.\n")
print(" -----------------------------")
print("|    1. Kirjan nimell√§        |")
print("|    2. Kirjailijan nimell√§   |")
print("|    3. Kirja + kirjailija    |")
print(" -----------------------------\n")

# P√§√§silmukka, joka kysyy k√§ytt√§j√§lt√§, mit√§ hakutapaa k√§ytet√§√§n
while True:
    try:
        choose = int(input("\nValitse numero 1 - 3 sen perusteella, mit√§ hakutapaa haluat k√§ytt√§√§."
        " (1) kirjan nimi, (2) kirjailijan nimi, (3) yhdistetty haku (nimi + kirjailija): "))

        # Jos k√§ytt√§j√§ sy√∂tt√§√§ muuta kuin numerot v√§lilt√§ 1 - 3, tulostetaan virheilmoitus
        if choose not in [1, 2, 3]:
            print("\nVirheellinen valinta! Valitse numero 1 - 3 v√§lilt√§")
            continue

    # Jos k√§ytt√§j√§ sy√∂tt√§√§ kirjaimia
    except ValueError:
        print("\nVirheellinen valinta, √§l√§ sy√∂t√§ kirjaimia, vaan numeroita v√§lilt√§ 1 - 3")
        continue

    # Kirjan nimen sy√∂tt√§minen   
    if choose == 1:
        hakusana = input("Anna kirjan nimi: ")

        # Jos k√§ytt√§j√§ ei sy√∂t√§ mit√§√§n
        if not hakusana:
            print("Kirjan nimi ei saa olla tyhj√§, Yrit√§ uudelleen.\n")
            continue

        print() # Tulostaa tyhj√§n rivin
        
        # Haetaan kirjoja nimen perusteella
        search_by_title(hakusana)

    # Kirjailijan nimen sy√∂tt√§minen
    if  choose == 2:
        hakusana = input ("Anna kirjailijan nimi: ")
        print()
        if not hakusana:
            print("Kirjailijan nimi ei saa olla tyhj√§, Yrit√§ uudelleen.\n")
            continue

        # Tarkistetaan onko hakusanassa numeroita
        if hakusana.strip().lstrip('-').isdigit():
            print("Kirjailijan nimi ei voi olla pelk√§st√§√§n positiivinen tai negatiivinen numero/numeroita. Yrit√§ uudelleen\n")
            continue

        # Haetaan kirjoja kirjailijan nimen perusteella
        search_by_author(hakusana)

    # Yhdistetty haku (Kirjan nimi, ja kirjailija)
    if  choose == 3:
        while True:

            book_name = input("Anna kirjan nimi: ")
            book_author = input("Anna kirjailijan nimi: ")
            print()
            # Jos kirjan nimeen tai kirjailijaan k√§ytt√§j√§ ei sy√∂t√§ mit√§√§n "Enter"- tulostetaan huomautus k√§ytt√§j√§lle
            if not book_name or not book_author:
                print("Molemmat tiedot ovat pakollisia. Yrit√§ uudelleen\n")
                continue
            
            # Jos k√§ytt√§j√§ sy√∂tt√§√§ 'kirjailija' -sy√∂tteeseen positiivisen tai negatiivisen luvun - tulostetaan huomautus k√§ytt√§j√§lle
            elif book_author.strip().lstrip('-').isdigit():
                print("Kirjailijan nimi ei voi olla pelkk√§ numero. Yrit√§ uudelleen.\n")
                continue

            # Yhdistet√§√§n nimi ja kirjailija
            combined = f"{book_name} {book_author}"

            # Haetaan kirjoja hakusanojen perusteella
            search_by_title_and_author(combined)
            break

    # Kysyt√§√§n k√§ytt√§j√§lt√§, aikooko jatkaa viel√§ hakua
    while True:
        continue_finding = input("\nHaluatko jatkaa kirjojen etsiskely√§? Paina 'k' = kyll√§, tai 'e' = ei (k/e): ").lower()

        # Jos k√§ytt√§j√§n sy√∂te on k-kirjain, silmukka katkaistaan ja kirjojen hakeminen alkaa alusta
        if continue_finding == "k":
            break
        
        # jos k√§ytt√§j√§n sy√∂te on e-kirjain, Python-ohjelma sulkeutuu
        elif continue_finding == 'e':
            type_writer("\nKiitos, ett√§ k√§ytit Kirjanhaku-ohjelmaani!üìö")
            type_writer("Sulkeutuu...")

            # Odotetaan hetki ennen sulkeutumista
            time.sleep(3)

            #Lopetetaan ohjelma
            exit()
            
        # Jos k√§ytt√§j√§ sy√∂tt√§√§ muuta kun k, tai e
        else:
            print("\nV√§√§r√§ sy√∂te, Kirjoita 'k' jatkaaksesi tai 'e' lopettaaksesi")